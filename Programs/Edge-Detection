import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as transforms
from torchvision import datasets
from PIL import Image
import matplotlib.pyplot as plt

# Load CIFAR-10 dataset
transform = transforms.Compose([
    transforms.Resize((256, 256)),  # Resize the image
    transforms.Grayscale(num_output_channels=1),  # Convert to grayscale
    transforms.ToTensor()            # Convert PIL image to tensor
])
cifar_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)

# Get an image from the dataset
image, _ = cifar_dataset[0]  # Get the first image from the dataset

# Define the edge detection kernel
sobel_x = torch.tensor([[-1, 0, 1],
                        [-2, 0, 2],
                        [-1, 0, 1]], dtype=torch.float32)

sobel_y = torch.tensor([[-1, -2, -1],
                        [0, 0, 0],
                        [1, 2, 1]], dtype=torch.float32)

class SobelEdgeDetection(nn.Module):
    def __init__(self):
        super(SobelEdgeDetection, self).__init__()
        self.conv_x = nn.Conv2d(1, 1, kernel_size=3, padding=1, bias=False)
        self.conv_y = nn.Conv2d(1, 1, kernel_size=3, padding=1, bias=False)
        self.conv_x.weight = nn.Parameter(sobel_x.view(1, 1, 3, 3))
        self.conv_y.weight = nn.Parameter(sobel_y.view(1, 1, 3, 3))
        
    def forward(self, x):
        edge_x = self.conv_x(x)
        edge_y = self.conv_y(x)
        edge = torch.sqrt(edge_x**2 + edge_y**2)
        return edge

# Initialize the model
model = SobelEdgeDetection()

# Perform edge detection
with torch.no_grad():
    edge_map = model(image.unsqueeze(0))  # Add batch dimension

# Visualize the result
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.imshow(image.squeeze().numpy(), cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(edge_map.squeeze().numpy(), cmap='gray')
plt.title('Edge Detection Result')
plt.axis('off')

plt.show()
